Index: src/ru/javawebinar/basejava/exception/StorageException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/exception/StorageException.java	(revision 66a857390861ca2904ee1271e34cc89b7d32b28a)
+++ src/ru/javawebinar/basejava/exception/StorageException.java	(date 1558386634934)
@@ -1,5 +1,7 @@
 package ru.javawebinar.basejava.exception;
 
+import java.io.IOException;
+
 /**
  * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 04.05.2019.
  * @link https://github.com/vladmeh/basejava
@@ -12,6 +14,11 @@
         super(message);
         this.uuid = uuid;
     }
+
+    public StorageException(String message, String uuid, IOException e) {
+        super(message, e);
+        this.uuid = uuid;
+    }
 
     public String getUuid() {
         return uuid;
Index: src/ru/javawebinar/basejava/storage/AbstractFileStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/AbstractFileStorage.java	(date 1558386691385)
+++ src/ru/javawebinar/basejava/storage/AbstractFileStorage.java	(date 1558386691385)
@@ -0,0 +1,82 @@
+package ru.javawebinar.basejava.storage;
+
+import ru.javawebinar.basejava.exception.StorageException;
+import ru.javawebinar.basejava.model.Resume;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+import java.util.Objects;
+
+/**
+ * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 21.05.2019.
+ * @link https://github.com/vladmeh/basejava
+ */
+
+public abstract class AbstractFileStorage extends AbstractStorage<File> {
+    private File directory;
+
+    public AbstractFileStorage(File directory) {
+        Objects.requireNonNull(directory, "directory must not be null");
+        if (!directory.isDirectory()) {
+            throw new IllegalArgumentException(directory.getAbsolutePath() + " is not directory");
+        }
+        if (!directory.canRead() || !directory.canWrite()) {
+            throw new IllegalArgumentException(directory.getAbsolutePath() + " is not readable/writable");
+        }
+
+        this.directory = directory;
+    }
+
+    @Override
+    protected File getSearchKey(String uuid) {
+        return new File(directory, uuid);
+    }
+
+    @Override
+    protected boolean isExist(File file) {
+        return file.exists();
+    }
+
+    @Override
+    protected void doUpdate(Resume r, File file) {
+
+    }
+
+    @Override
+    protected void doSave(Resume r, File file) {
+        try {
+            file.createNewFile();
+            doWrite(r, file);
+        } catch (IOException e) {
+            throw new StorageException("IO error", file.getName(), e);
+        }
+    }
+
+    protected abstract void doWrite(Resume r, File file) throws IOException;
+
+    @Override
+    protected Resume doGet(File file) {
+        return null;
+    }
+
+    @Override
+    protected void doDelete(File file) {
+
+    }
+
+    @Override
+    protected List<Resume> doCopyAll() {
+        return null;
+    }
+
+    @Override
+    public void clear() {
+
+    }
+
+    @Override
+    public int size() {
+        return 0;
+    }
+}
