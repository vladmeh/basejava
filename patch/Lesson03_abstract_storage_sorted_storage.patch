Index: src/ru/javawebinar/basejava/storage/SortedArrayStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/SortedArrayStorage.java	(date 1531169639157)
+++ src/ru/javawebinar/basejava/storage/SortedArrayStorage.java	(date 1531169639157)
@@ -0,0 +1,39 @@
+package ru.javawebinar.basejava.storage;
+
+import ru.javawebinar.basejava.model.Resume;
+
+import java.util.Arrays;
+
+public class SortedArrayStorage extends AbstractArrayStorage {
+    @Override
+    public void clear() {
+
+    }
+
+    @Override
+    public void update(Resume r) {
+
+    }
+
+    @Override
+    public void save(Resume r) {
+
+    }
+
+    @Override
+    public void delete(String uuid) {
+
+    }
+
+    @Override
+    public Resume[] getAll() {
+        return new Resume[0];
+    }
+
+    @Override
+    protected int getIndex(String uuid) {
+        Resume searchKey = new Resume();
+        searchKey.setUuid(uuid);
+        return Arrays.binarySearch(storage, 0, size, searchKey);
+    }
+}
\ No newline at end of file
Index: src/ru/javawebinar/basejava/storage/AbstractArrayStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/AbstractArrayStorage.java	(date 1531168594101)
+++ src/ru/javawebinar/basejava/storage/AbstractArrayStorage.java	(date 1531168594101)
@@ -0,0 +1,28 @@
+package ru.javawebinar.basejava.storage;
+
+import ru.javawebinar.basejava.model.Resume;
+
+/**
+ * Array based storage for Resumes
+ */
+public abstract class AbstractArrayStorage implements Storage {
+    protected static final int STORAGE_LIMIT = 10000;
+
+    protected Resume[] storage = new Resume[STORAGE_LIMIT];
+    protected int size = 0;
+
+    public int size() {
+        return size;
+    }
+
+    public Resume get(String uuid) {
+        int index = getIndex(uuid);
+        if (index == -1) {
+            System.out.println("Resume " + uuid + " not exist");
+            return null;
+        }
+        return storage[index];
+    }
+
+    protected abstract int getIndex(String uuid);
+}
\ No newline at end of file
Index: src/ru/javawebinar/basejava/model/Resume.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/model/Resume.java	(revision 3d66f6f2bf86b50c089eb865e1d8859e49fb266c)
+++ src/ru/javawebinar/basejava/model/Resume.java	(date 1531169639119)
@@ -3,7 +3,7 @@
 /**
  * com.urise.webapp.model.ru.javawebinar.basejava.model.Resume class
  */
-public class Resume {
+public class Resume implements Comparable<Resume> {
 
     // Unique identifier
     private String uuid;
@@ -35,4 +35,9 @@
     public int hashCode() {
         return uuid.hashCode();
     }
+
+    @Override
+    public int compareTo(Resume o) {
+        return uuid.compareTo(o.uuid);
+    }
 }
Index: src/ru/javawebinar/basejava/storage/ArrayStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/ArrayStorage.java	(revision 3d66f6f2bf86b50c089eb865e1d8859e49fb266c)
+++ src/ru/javawebinar/basejava/storage/ArrayStorage.java	(date 1531169424622)
@@ -7,15 +7,11 @@
 /**
  * Array based storage for Resumes
  */
-public class ArrayStorage implements Storage {
-    private static final int STORAGE_LIMIT = 10000;
-    private Resume[] storage = new Resume[STORAGE_LIMIT];
-    private int size = 0;
+public class ArrayStorage extends AbstractArrayStorage {
 
     public void clear() {
         Arrays.fill(storage, 0, size, null);
         size = 0;
-
     }
 
     public void update(Resume r) {
@@ -38,15 +34,6 @@
         }
     }
 
-    public Resume get(String uuid) {
-        int index = getIndex(uuid);
-        if (index == -1) {
-            System.out.println("Resume " + uuid + " not exist");
-            return null;
-        }
-        return storage[index];
-    }
-
     public void delete(String uuid) {
         int index = getIndex(uuid);
         if (index == -1) {
@@ -58,19 +45,11 @@
         }
     }
 
-    /**
-     * @return array, contains only Resumes in storage (without null)
-     */
-
     public Resume[] getAll() {
         return Arrays.copyOfRange(storage, 0, size);
     }
 
-    public int size() {
-        return size;
-    }
-
-    private int getIndex(String uuid) {
+    protected int getIndex(String uuid) {
         for (int i = 0; i < size; i++) {
             if (uuid.equals(storage[i].getUuid())) {
                 return i;
@@ -78,4 +57,5 @@
         }
         return -1;
     }
+
 }
