Index: src/ru/javawebinar/basejava/MainCollections.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/MainCollections.java	(revision da4b992adda614d6b44543c291fa71d226ffafe3)
+++ src/ru/javawebinar/basejava/MainCollections.java	(date 1557618023339)
@@ -58,5 +58,9 @@
         for (Map.Entry<String, Resume> entry : map.entrySet()) {
             System.out.println(entry.getValue());
         }
+
+        List<Resume> resumes = Arrays.asList(RESUME_1, RESUME_2, RESUME_3);
+        resumes.remove(1);
+        System.out.println(resumes);
     }
 }
Index: src/ru/javawebinar/basejava/model/Resume.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/model/Resume.java	(revision da4b992adda614d6b44543c291fa71d226ffafe3)
+++ src/ru/javawebinar/basejava/model/Resume.java	(date 1557618056519)
@@ -5,7 +5,7 @@
 /**
  * com.urise.webapp.model.ru.javawebinar.basejava.model.Resume class
  */
-public class Resume implements Comparable<Resume> {
+public class Resume {
 
     // Unique identifier
     private final String uuid;
@@ -42,8 +42,4 @@
         return uuid.hashCode();
     }
 
-    @Override
-    public int compareTo(Resume o) {
-        return uuid.compareTo(o.uuid);
-    }
 }
Index: src/ru/javawebinar/basejava/storage/SortedArrayStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/SortedArrayStorage.java	(revision da4b992adda614d6b44543c291fa71d226ffafe3)
+++ src/ru/javawebinar/basejava/storage/SortedArrayStorage.java	(date 1557618142819)
@@ -3,8 +3,24 @@
 import ru.javawebinar.basejava.model.Resume;
 
 import java.util.Arrays;
+import java.util.Comparator;
 
 public class SortedArrayStorage extends AbstractArrayStorage {
+    /*
+    private static class ResumeComparator implements Comparator<Resume> {
+        @Override
+        public int compare(Resume o1, Resume o2) {
+            return o1.getUuid().compareTo(o2.getUuid());
+        }
+    }
+*/
+
+    private static final Comparator<Resume> RESUME_COMPARATOR = new Comparator<Resume>() {
+        @Override
+        public int compare(Resume o1, Resume o2) {
+            return o1.getUuid().compareTo(o2.getUuid());
+        }
+    };
 
     @Override
     protected void insertElement(Resume r, int index) {
@@ -26,6 +42,6 @@
     @Override
     protected Integer getSearchKey(String uuid) {
         Resume searchKey = new Resume(uuid);
-        return Arrays.binarySearch(storage, 0, size, searchKey);
+        return Arrays.binarySearch(storage, 0, size, searchKey, RESUME_COMPARATOR);
     }
 }
\ No newline at end of file
