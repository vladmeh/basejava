Index: test/ru/javawebinar/basejava/storage/AbstractArrayStorageTest.java
===================================================================
--- test/ru/javawebinar/basejava/storage/AbstractArrayStorageTest.java	(revision 614111de104d66f160591f1bc64e94aa1c0495cc)
+++ test/ru/javawebinar/basejava/storage/AbstractStorageTest.java	(date 1557614877383)
@@ -14,7 +14,7 @@
  * @link https://github.com/vladmeh/basejava
  */
 
-public abstract class AbstractArrayStorageTest {
+public abstract class AbstractStorageTest {
 
     private static final String UUID_1 = "uuid1";
     private static final String UUID_2 = "uuid2";
@@ -35,7 +35,7 @@
 
     private final Storage storage;
 
-    AbstractArrayStorageTest(Storage storage) {
+    AbstractStorageTest(Storage storage) {
         this.storage = storage;
     }
 
@@ -103,6 +103,7 @@
         storage.save(RESUME_1);
     }
 
+    // TODO remain only for Arrays implementations
     @Test(expected = StorageException.class)
     public void saveOverflow() {
         try {
Index: test/ru/javawebinar/basejava/storage/ListStorageTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/ru/javawebinar/basejava/storage/ListStorageTest.java	(date 1557614606480)
+++ test/ru/javawebinar/basejava/storage/ListStorageTest.java	(date 1557614606480)
@@ -0,0 +1,13 @@
+package ru.javawebinar.basejava.storage;
+
+/**
+ * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 12.05.2019.
+ * @link https://github.com/vladmeh/basejava
+ */
+
+public class ListStorageTest extends AbstractStorageTest {
+
+    public ListStorageTest() {
+        super(new ListStorage());
+    }
+}
\ No newline at end of file
Index: test/ru/javawebinar/basejava/storage/SortedArrayStorageTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/ru/javawebinar/basejava/storage/SortedArrayStorageTest.java	(revision 614111de104d66f160591f1bc64e94aa1c0495cc)
+++ test/ru/javawebinar/basejava/storage/SortedArrayStorageTest.java	(date 1557611879920)
@@ -5,7 +5,7 @@
  * @link https://github.com/vladmeh/basejava
  */
 
-public class SortedArrayStorageTest extends AbstractArrayStorageTest {
+public class SortedArrayStorageTest extends AbstractStorageTest {
 
     public SortedArrayStorageTest() {
         super(new SortedArrayStorage());
Index: src/ru/javawebinar/basejava/storage/MapUuidStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/MapUuidStorage.java	(date 1557614890950)
+++ src/ru/javawebinar/basejava/storage/MapUuidStorage.java	(date 1557614890950)
@@ -0,0 +1,63 @@
+package ru.javawebinar.basejava.storage;
+
+import ru.javawebinar.basejava.model.Resume;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 12.05.2019.
+ * @link https://github.com/vladmeh/basejava
+ */
+
+// TODO implement
+// TODO create new MapStorage with search key not uuid
+public class MapUuidStorage extends AbstractStorage {
+
+    private Map<String, Resume> map = new HashMap<>();
+
+    @Override
+    protected Object getSearchKey(String uuid) {
+        return null;
+    }
+
+    @Override
+    protected boolean isExist(Object searchKey) {
+        return false;
+    }
+
+    @Override
+    protected void doUpdate(Resume r, Object searchKey) {
+
+    }
+
+    @Override
+    protected void doSave(Resume r, Object searchKey) {
+
+    }
+
+    @Override
+    protected Resume doGet(Object searchKey) {
+        return null;
+    }
+
+    @Override
+    protected void doDelete(Object searchKey) {
+
+    }
+
+    @Override
+    public void clear() {
+
+    }
+
+    @Override
+    public Resume[] getAll() {
+        return new Resume[0];
+    }
+
+    @Override
+    public int size() {
+        return 0;
+    }
+}
Index: test/ru/javawebinar/basejava/storage/ArrayStorageTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/ru/javawebinar/basejava/storage/ArrayStorageTest.java	(revision 614111de104d66f160591f1bc64e94aa1c0495cc)
+++ test/ru/javawebinar/basejava/storage/ArrayStorageTest.java	(date 1557611879976)
@@ -5,7 +5,7 @@
  * @link https://github.com/vladmeh/basejava
  */
 
-public class ArrayStorageTest extends AbstractArrayStorageTest {
+public class ArrayStorageTest extends AbstractStorageTest {
 
     public ArrayStorageTest() {
         super(new ArrayStorage());
Index: src/ru/javawebinar/basejava/storage/AbstractArrayStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/AbstractArrayStorage.java	(revision 614111de104d66f160591f1bc64e94aa1c0495cc)
+++ src/ru/javawebinar/basejava/storage/AbstractArrayStorage.java	(date 1557613632601)
@@ -1,7 +1,5 @@
 package ru.javawebinar.basejava.storage;
 
-import ru.javawebinar.basejava.exception.ExistStorageException;
-import ru.javawebinar.basejava.exception.NotExistStorageException;
 import ru.javawebinar.basejava.exception.StorageException;
 import ru.javawebinar.basejava.model.Resume;
 
@@ -10,68 +8,63 @@
 /**
  * Array based storage for Resumes
  */
-public abstract class AbstractArrayStorage implements Storage {
+public abstract class AbstractArrayStorage extends AbstractStorage {
 
     static final int STORAGE_LIMIT = 10000;
     protected Resume[] storage = new Resume[STORAGE_LIMIT];
     int size = 0;
 
+    @Override
     public int size() {
         return size;
     }
 
+    @Override
     public Resume[] getAll() {
         return Arrays.copyOfRange(storage, 0, size);
     }
 
-    public Resume get(String uuid) {
-        int index = getIndex(uuid);
-        if (index < 0) {
-            throw new NotExistStorageException(uuid);
-        }
-        return storage[index];
+    @Override
+    public Resume doGet(Object index) {
+        return storage[(Integer) index];
     }
 
+    @Override
     public void clear() {
         Arrays.fill(storage, 0, size, null);
         size = 0;
     }
 
-    public void update(Resume r) {
-        int index = getIndex(r.getUuid());
-        if (index < 0) {
-            throw new NotExistStorageException(r.getUuid());
-        } else {
-            storage[index] = r;
-        }
+    @Override
+    protected void doUpdate(Resume r, Object index) {
+        storage[(Integer) index] = r;
     }
 
-    public void save(Resume r) {
-        int index = getIndex(r.getUuid());
-        if (index >= 0) {
-            throw new ExistStorageException(r.getUuid());
-        } else if (size >= STORAGE_LIMIT) {
+    @Override
+    protected void doSave(Resume r, Object index) {
+        if (size >= STORAGE_LIMIT) {
             throw new StorageException("Storage overflow", r.getUuid());
         } else {
-            insertElement(r, index);
+            insertElement(r, (Integer) index);
             size++;
         }
     }
 
-    public void delete(String uuid) {
-        int index = getIndex(uuid);
-        if (index < 0) {
-            throw new NotExistStorageException(uuid);
-        } else {
-            fillDeletedElement(index);
-            storage[size - 1] = null;
-            size--;
-        }
+    @Override
+    protected void doDelete(Object index) {
+        fillDeletedElement((Integer) index);
+        storage[size - 1] = null;
+        size--;
+    }
+
+    @Override
+    protected boolean isExist(Object index) {
+        return (Integer) index >= 0;
     }
 
     protected abstract void insertElement(Resume r, int index);
 
     protected abstract void fillDeletedElement(int index);
 
-    protected abstract int getIndex(String uuid);
+    protected abstract Integer getSearchKey(String uuid);
 }
\ No newline at end of file
Index: src/ru/javawebinar/basejava/storage/ArrayStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/ArrayStorage.java	(revision 614111de104d66f160591f1bc64e94aa1c0495cc)
+++ src/ru/javawebinar/basejava/storage/ArrayStorage.java	(date 1557613632564)
@@ -17,7 +17,7 @@
         storage[index] = storage[size - 1];
     }
 
-    protected int getIndex(String uuid) {
+    protected Integer getSearchKey(String uuid) {
         for (int i = 0; i < size; i++) {
             if (uuid.equals(storage[i].getUuid())) {
                 return i;
Index: src/ru/javawebinar/basejava/storage/AbstractStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/AbstractStorage.java	(date 1557612982398)
+++ src/ru/javawebinar/basejava/storage/AbstractStorage.java	(date 1557612982398)
@@ -0,0 +1,65 @@
+package ru.javawebinar.basejava.storage;
+
+import ru.javawebinar.basejava.exception.ExistStorageException;
+import ru.javawebinar.basejava.exception.NotExistStorageException;
+import ru.javawebinar.basejava.model.Resume;
+
+/**
+ * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 12.05.2019.
+ * @link https://github.com/vladmeh/basejava
+ */
+
+public abstract class AbstractStorage implements Storage {
+
+    protected abstract Object getSearchKey(String uuid);
+
+    protected abstract boolean isExist(Object searchKey);
+
+    protected abstract void doUpdate(Resume r, Object searchKey);
+
+    protected abstract void doSave(Resume r, Object searchKey);
+
+    protected abstract Resume doGet(Object searchKey);
+
+    protected abstract void doDelete(Object searchKey);
+
+    @Override
+    public void update(Resume r) {
+        Object searchKey = getExistedSearchKey(r.getUuid());
+        doUpdate(r, searchKey);
+    }
+
+    @Override
+    public void save(Resume r) {
+        Object searchKey = getNotExistedSearchKey(r.getUuid());
+        doSave(r, searchKey);
+    }
+
+    @Override
+    public Resume get(String uuid) {
+        Object searchKey = getExistedSearchKey(uuid);
+        return doGet(searchKey);
+    }
+
+    @Override
+    public void delete(String uuid) {
+        Object searchKey = getExistedSearchKey(uuid);
+        doDelete(searchKey);
+    }
+
+    private Object getExistedSearchKey(String uuid) {
+        Object searchKey = getSearchKey(uuid);
+        if (!isExist(searchKey)) {
+            throw new NotExistStorageException(uuid);
+        }
+        return searchKey;
+    }
+
+    private Object getNotExistedSearchKey(String uuid) {
+        Object searchKey = getSearchKey(uuid);
+        if (isExist(searchKey)) {
+            throw new ExistStorageException(uuid);
+        }
+        return searchKey;
+    }
+}
Index: src/ru/javawebinar/basejava/storage/SortedArrayStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/SortedArrayStorage.java	(revision 614111de104d66f160591f1bc64e94aa1c0495cc)
+++ src/ru/javawebinar/basejava/storage/SortedArrayStorage.java	(date 1557613684686)
@@ -24,7 +24,7 @@
     }
 
     @Override
-    protected int getIndex(String uuid) {
+    protected Integer getSearchKey(String uuid) {
         Resume searchKey = new Resume(uuid);
         return Arrays.binarySearch(storage, 0, size, searchKey);
     }
Index: src/ru/javawebinar/basejava/MainUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/MainUtil.java	(date 1557613879962)
+++ src/ru/javawebinar/basejava/MainUtil.java	(date 1557613879962)
@@ -0,0 +1,19 @@
+package ru.javawebinar.basejava;
+
+/**
+ * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 12.05.2019.
+ * @link https://github.com/vladmeh/basejava
+ */
+
+public class MainUtil {
+    public static void main(String[] args) {
+        System.out.println(Integer.valueOf(-1) == Integer.valueOf(-1));
+        System.out.println(Integer.valueOf(-1) == new Integer(-1));
+        int result = getInt();
+        System.out.println(result);
+    }
+
+    private static Integer getInt() {
+        return null;
+    }
+}
Index: src/ru/javawebinar/basejava/storage/ListStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/ListStorage.java	(date 1557614571330)
+++ src/ru/javawebinar/basejava/storage/ListStorage.java	(date 1557614571330)
@@ -0,0 +1,66 @@
+package ru.javawebinar.basejava.storage;
+
+import ru.javawebinar.basejava.model.Resume;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 12.05.2019.
+ * @link https://github.com/vladmeh/basejava
+ */
+
+public class ListStorage extends AbstractStorage {
+
+    private List<Resume> list = new ArrayList<>();
+
+    @Override
+    protected Object getSearchKey(String uuid) {
+        for (int i = 0; i < list.size(); i++) {
+            if (list.get(i).getUuid().equals(uuid)) {
+                return i;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    protected boolean isExist(Object searchKey) {
+        return searchKey != null;
+    }
+
+    @Override
+    protected void doUpdate(Resume r, Object searchKey) {
+        list.set((Integer) searchKey, r);
+    }
+
+    @Override
+    protected void doSave(Resume r, Object searchKey) {
+        list.add(r);
+    }
+
+    @Override
+    protected Resume doGet(Object searchKey) {
+        return list.get((Integer) searchKey);
+    }
+
+    @Override
+    protected void doDelete(Object searchKey) {
+        list.remove(((Integer) searchKey).intValue());
+    }
+
+    @Override
+    public void clear() {
+        list.clear();
+    }
+
+    @Override
+    public Resume[] getAll() {
+        return list.toArray(new Resume[0]);
+    }
+
+    @Override
+    public int size() {
+        return list.size();
+    }
+}
