Index: test/ru/javawebinar/basejava/storage/SortedArrayStorageTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/ru/javawebinar/basejava/storage/SortedArrayStorageTest.java	(date 1557086872054)
+++ test/ru/javawebinar/basejava/storage/SortedArrayStorageTest.java	(date 1557086872054)
@@ -0,0 +1,13 @@
+package ru.javawebinar.basejava.storage;
+
+/**
+ * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 05.05.2019.
+ * @link https://github.com/vladmeh/basejava
+ */
+
+public class SortedArrayStorageTest extends AbstractArrayStorageTest {
+
+    public SortedArrayStorageTest() {
+        super(new SortedArrayStorage());
+    }
+}
\ No newline at end of file
Index: test/ru/javawebinar/basejava/storage/AbstractArrayStorageTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/ru/javawebinar/basejava/storage/AbstractArrayStorageTest.java	(date 1557083063000)
+++ test/ru/javawebinar/basejava/storage/AbstractArrayStorageTest.java	(date 1557087779906)
@@ -1,62 +1,132 @@
 package ru.javawebinar.basejava.storage;
 
-import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
+import ru.javawebinar.basejava.exception.ExistStorageException;
 import ru.javawebinar.basejava.exception.NotExistStorageException;
+import ru.javawebinar.basejava.exception.StorageException;
 import ru.javawebinar.basejava.model.Resume;
 
+import static org.junit.Assert.*;
+
 /**
  * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 05.05.2019.
  * @link https://github.com/vladmeh/basejava
  */
 
-public class AbstractArrayStorageTest {
+public abstract class AbstractArrayStorageTest {
 
     private static final String UUID_1 = "uuid1";
+    private static final Resume RESUME_1 = new Resume(UUID_1);
+
     private static final String UUID_2 = "uuid2";
+    private static final Resume RESUME_2 = new Resume(UUID_2);
+
     private static final String UUID_3 = "uuid3";
-    private Storage storage;
+    private static final Resume RESUME_3 = new Resume(UUID_3);
+
+    private static final String UUID_4 = "uuid4";
+    private static final Resume RESUME_4 = new Resume(UUID_4);
+
+    private final Storage storage;
+
+    AbstractArrayStorageTest(Storage storage) {
+        this.storage = storage;
+    }
 
     @Before
     public void setUp() {
         storage.clear();
-        storage.save(new Resume(UUID_1));
-        storage.save(new Resume(UUID_2));
-        storage.save(new Resume(UUID_3));
+        storage.save(RESUME_1);
+        storage.save(RESUME_2);
+        storage.save(RESUME_3);
     }
 
     @Test
     public void size() {
-        Assert.assertEquals(3, storage.size());
+        assertSize(3);
     }
 
     @Test
     public void getAll() {
+        Resume[] array = storage.getAll();
+        assertEquals(3, array.length);
+        assertEquals(RESUME_1, array[0]);
+        assertEquals(RESUME_2, array[1]);
+        assertEquals(RESUME_3, array[2]);
     }
 
     @Test
     public void get() {
+        assertGet(RESUME_1);
+        assertGet(RESUME_2);
+        assertGet(RESUME_3);
+    }
+
+    @Test(expected = NotExistStorageException.class)
+    public void getNotExist() {
+        storage.get("dummy");
     }
 
     @Test
     public void clear() {
+        storage.clear();
+        assertSize(0);
     }
 
     @Test
     public void update() {
+        Resume newResume = new Resume(UUID_1);
+        storage.update(newResume);
+        assertSame(newResume, storage.get(UUID_1));
+    }
+
+    @Test(expected = NotExistStorageException.class)
+    public void updateNotExist() {
+        storage.get("dummy");
     }
 
     @Test
     public void save() {
+        storage.save(RESUME_4);
+        assertSize(4);
+        assertGet(RESUME_4);
+    }
+
+    @Test(expected = ExistStorageException.class)
+    public void saveExist() {
+        storage.save(RESUME_1);
+    }
+
+    @Test(expected = StorageException.class)
+    public void saveOverflow() {
+        try {
+            for (int i = 4; i <= AbstractArrayStorage.STORAGE_LIMIT; i++) {
+                storage.save(new Resume());
+            }
+        } catch (StorageException e) {
+            fail();
+        }
+        storage.save(new Resume());
     }
 
-    @Test
+    @Test(expected = NotExistStorageException.class)
     public void delete() {
+        storage.delete(UUID_1);
+        assertSize(2);
+        storage.get(UUID_1);
     }
 
     @Test(expected = NotExistStorageException.class)
-    public void getNotExist() {
-        storage.get("dummy");
+    public void deleteNotExist() {
+        storage.delete("dummy");
+    }
+
+    private void assertGet(Resume r) {
+        assertEquals(r, storage.get(r.getUuid()));
+    }
+
+    private void assertSize(int size) {
+        assertEquals(size, storage.size());
     }
 }
\ No newline at end of file
Index: test/ru/javawebinar/basejava/storage/ArrayStorageTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/ru/javawebinar/basejava/storage/ArrayStorageTest.java	(date 1557083063000)
+++ test/ru/javawebinar/basejava/storage/ArrayStorageTest.java	(date 1557086871979)
@@ -7,4 +7,7 @@
 
 public class ArrayStorageTest extends AbstractArrayStorageTest {
 
+    public ArrayStorageTest() {
+        super(new ArrayStorage());
+    }
 }
\ No newline at end of file
Index: src/ru/javawebinar/basejava/storage/AbstractArrayStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/AbstractArrayStorage.java	(date 1557083063000)
+++ src/ru/javawebinar/basejava/storage/AbstractArrayStorage.java	(date 1557087442214)
@@ -12,7 +12,7 @@
  */
 public abstract class AbstractArrayStorage implements Storage {
 
-    private static final int STORAGE_LIMIT = 10000;
+    static final int STORAGE_LIMIT = 10000;
     protected Resume[] storage = new Resume[STORAGE_LIMIT];
     int size = 0;
 
