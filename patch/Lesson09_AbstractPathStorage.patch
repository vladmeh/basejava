Index: src/ru/javawebinar/basejava/storage/AbstractPathStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/AbstractPathStorage.java	(date 1559075755892)
+++ src/ru/javawebinar/basejava/storage/AbstractPathStorage.java	(date 1559075755892)
@@ -0,0 +1,83 @@
+package ru.javawebinar.basejava.storage;
+
+import ru.javawebinar.basejava.exception.StorageException;
+import ru.javawebinar.basejava.model.Resume;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.List;
+import java.util.Objects;
+
+/**
+ * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 28.05.2019.
+ * @link https://github.com/vladmeh/basejava
+ */
+
+public abstract class AbstractPathStorage extends AbstractStorage<Path> {
+    private Path directory;
+
+    public AbstractPathStorage(String dir) {
+        directory = Paths.get(dir);
+        Objects.requireNonNull(directory, "directory must not be null");
+        if (!Files.isDirectory(directory) || !Files.isWritable(directory)) {
+            throw new IllegalArgumentException(dir + " is not directory or is not writable");
+        }
+    }
+
+    protected abstract void doWrite(Resume r, OutputStream file) throws IOException;
+
+    protected abstract Resume doRead(InputStream file) throws IOException;
+
+    @Override
+    protected Path getSearchKey(String uuid) {
+        return null;
+    }
+
+    @Override
+    protected boolean isExist(Path searchKey) {
+        return false;
+    }
+
+    @Override
+    protected void doUpdate(Resume r, Path searchKey) {
+
+    }
+
+    @Override
+    protected void doSave(Resume r, Path searchKey) {
+
+    }
+
+    @Override
+    protected Resume doGet(Path searchKey) {
+        return null;
+    }
+
+    @Override
+    protected void doDelete(Path searchKey) {
+
+    }
+
+    @Override
+    protected List<Resume> doCopyAll() {
+        return null;
+    }
+
+    @Override
+    public void clear() {
+        try {
+            Files.list(directory).forEach(this::doDelete);
+        } catch (IOException e) {
+            throw new StorageException("Path delete error", null, e);
+        }
+    }
+
+    @Override
+    public int size() {
+        return 0;
+    }
+}
