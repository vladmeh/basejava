Index: src/ru/javawebinar/basejava/storage/ObjectStreamPathStorage.java
===================================================================
--- src/ru/javawebinar/basejava/storage/ObjectStreamPathStorage.java	(revision 7ecf9b03cc9ef97ec8637f75e0717ef76dc47ec2)
+++ src/ru/javawebinar/basejava/storage/ObjectStreamPathStorage.java	(revision 7ecf9b03cc9ef97ec8637f75e0717ef76dc47ec2)
@@ -1,34 +0,0 @@
-package ru.javawebinar.basejava.storage;
-
-import ru.javawebinar.basejava.exception.StorageException;
-import ru.javawebinar.basejava.model.Resume;
-
-import java.io.*;
-
-/**
- * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 28.05.2019.
- * @link https://github.com/vladmeh/basejava
- */
-
-public class ObjectStreamPathStorage extends AbstractPathStorage {
-
-    protected ObjectStreamPathStorage(String directory) {
-        super(directory);
-    }
-
-    @Override
-    protected void doWrite(Resume r, OutputStream os) throws IOException {
-        try (ObjectOutputStream oos = new ObjectOutputStream(os)) {
-            oos.writeObject(r);
-        }
-    }
-
-    @Override
-    protected Resume doRead(InputStream is) throws IOException {
-        try (ObjectInputStream ois = new ObjectInputStream(is)) {
-            return (Resume) ois.readObject();
-        } catch (ClassNotFoundException e) {
-            throw new StorageException("Error read resume", null, e);
-        }
-    }
-}
Index: test/ru/javawebinar/basejava/storage/ObjectStreamStorageTest.java
===================================================================
--- test/ru/javawebinar/basejava/storage/ObjectStreamStorageTest.java	(revision 7ecf9b03cc9ef97ec8637f75e0717ef76dc47ec2)
+++ test/ru/javawebinar/basejava/storage/ObjectFileStorageTest.java	(date 1559593332377)
@@ -1,13 +1,15 @@
 package ru.javawebinar.basejava.storage;
 
+import ru.javawebinar.basejava.storage.serializer.ObjectStreamSerializer;
+
 /**
  * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 28.05.2019.
  * @link https://github.com/vladmeh/basejava
  */
 
-public class ObjectStreamStorageTest extends AbstractStorageTest {
+public class ObjectFileStorageTest extends AbstractStorageTest {
 
-    public ObjectStreamStorageTest() {
-        super(new ObjectStreamStorage(STORAGE_DIR));
+    public ObjectFileStorageTest() {
+        super(new FileStorage(STORAGE_DIR, new ObjectStreamSerializer()));
     }
 }
\ No newline at end of file
Index: src/ru/javawebinar/basejava/storage/ObjectStreamStorage.java
===================================================================
--- src/ru/javawebinar/basejava/storage/ObjectStreamStorage.java	(revision 7ecf9b03cc9ef97ec8637f75e0717ef76dc47ec2)
+++ src/ru/javawebinar/basejava/storage/serializer/ObjectStreamSerializer.java	(date 1559592827649)
@@ -1,4 +1,4 @@
-package ru.javawebinar.basejava.storage;
+package ru.javawebinar.basejava.storage.serializer;
 
 import ru.javawebinar.basejava.exception.StorageException;
 import ru.javawebinar.basejava.model.Resume;
@@ -10,21 +10,17 @@
  * @link https://github.com/vladmeh/basejava
  */
 
-public class ObjectStreamStorage extends AbstractFileStorage {
-
-    protected ObjectStreamStorage(File directory) {
-        super(directory);
-    }
+public class ObjectStreamSerializer implements StreamSerializer {
 
     @Override
-    protected void doWrite(Resume r, OutputStream os) throws IOException {
+    public void doWrite(Resume r, OutputStream os) throws IOException {
         try (ObjectOutputStream oos = new ObjectOutputStream(os)) {
             oos.writeObject(r);
         }
     }
 
     @Override
-    protected Resume doRead(InputStream is) throws IOException {
+    public Resume doRead(InputStream is) throws IOException {
         try (ObjectInputStream ois = new ObjectInputStream(is)) {
             return (Resume) ois.readObject();
         } catch (ClassNotFoundException e) {
Index: src/ru/javawebinar/basejava/storage/AbstractFileStorage.java
===================================================================
--- src/ru/javawebinar/basejava/storage/AbstractFileStorage.java	(revision 7ecf9b03cc9ef97ec8637f75e0717ef76dc47ec2)
+++ src/ru/javawebinar/basejava/storage/FileStorage.java	(date 1559593158466)
@@ -2,6 +2,7 @@
 
 import ru.javawebinar.basejava.exception.StorageException;
 import ru.javawebinar.basejava.model.Resume;
+import ru.javawebinar.basejava.storage.serializer.StreamSerializer;
 
 import java.io.*;
 import java.util.ArrayList;
@@ -13,15 +14,13 @@
  * @link https://github.com/vladmeh/basejava
  */
 
-public abstract class AbstractFileStorage extends AbstractStorage<File> {
+public class FileStorage extends AbstractStorage<File> {
     private File directory;
-
-    protected abstract void doWrite(Resume r, OutputStream file) throws IOException;
+    private StreamSerializer streamSerializer;
 
-    protected abstract Resume doRead(InputStream file) throws IOException;
+    public FileStorage(File directory, StreamSerializer streamSerializer) {
+        this.streamSerializer = streamSerializer;
 
-
-    public AbstractFileStorage(File directory) {
         Objects.requireNonNull(directory, "directory must not be null");
         if (!directory.isDirectory()) {
             throw new IllegalArgumentException(directory.getAbsolutePath() + " is not directory");
@@ -46,7 +45,7 @@
     @Override
     protected void doUpdate(Resume r, File file) {
         try {
-            doWrite(r, new BufferedOutputStream(new FileOutputStream(file)));
+            streamSerializer.doWrite(r, new BufferedOutputStream(new FileOutputStream(file)));
         } catch (IOException e) {
             throw new StorageException("File write error", r.getUuid(), e);
         }
@@ -65,7 +64,7 @@
     @Override
     protected Resume doGet(File file) {
         try {
-            return doRead(new BufferedInputStream(new FileInputStream(file)));
+            return streamSerializer.doRead(new BufferedInputStream(new FileInputStream(file)));
         } catch (IOException e) {
             throw new StorageException("File read error", file.getName(), e);
         }
Index: src/ru/javawebinar/basejava/storage/AbstractPathStorage.java
===================================================================
--- src/ru/javawebinar/basejava/storage/AbstractPathStorage.java	(revision 7ecf9b03cc9ef97ec8637f75e0717ef76dc47ec2)
+++ src/ru/javawebinar/basejava/storage/PathStorage.java	(date 1559593441111)
@@ -2,8 +2,11 @@
 
 import ru.javawebinar.basejava.exception.StorageException;
 import ru.javawebinar.basejava.model.Resume;
+import ru.javawebinar.basejava.storage.serializer.StreamSerializer;
 
-import java.io.*;
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -17,10 +20,12 @@
  * @link https://github.com/vladmeh/basejava
  */
 
-public abstract class AbstractPathStorage extends AbstractStorage<Path> {
+public class PathStorage extends AbstractStorage<Path> {
     private Path directory;
+    private StreamSerializer streamSerializer;
 
-    public AbstractPathStorage(String dir) {
+    public PathStorage(String dir, StreamSerializer streamSerializer) {
+        this.streamSerializer = streamSerializer;
         directory = Paths.get(dir);
         Objects.requireNonNull(directory, "directory must not be null");
         if (!Files.isDirectory(directory) || !Files.isWritable(directory)) {
@@ -28,10 +33,6 @@
         }
     }
 
-    protected abstract void doWrite(Resume r, OutputStream file) throws IOException;
-
-    protected abstract Resume doRead(InputStream file) throws IOException;
-
     @Override
     protected Path getSearchKey(String uuid) {
         return directory.resolve(uuid);
@@ -45,7 +46,7 @@
     @Override
     protected void doUpdate(Resume r, Path path) {
         try {
-            doWrite(r, new BufferedOutputStream(Files.newOutputStream(path)));
+            streamSerializer.doWrite(r, new BufferedOutputStream(Files.newOutputStream(path)));
         } catch (IOException e) {
             throw new StorageException("File write error", r.getUuid(), e);
         }
@@ -64,7 +65,7 @@
     @Override
     protected Resume doGet(Path path) {
         try {
-            return doRead(new BufferedInputStream(Files.newInputStream(path)));
+            return streamSerializer.doRead(new BufferedInputStream(Files.newInputStream(path)));
         } catch (IOException e) {
             throw new StorageException("File read error", getFileName(path), e);
         }
Index: test/ru/javawebinar/basejava/storage/ObjectStreamPathStorageTest.java
===================================================================
--- test/ru/javawebinar/basejava/storage/ObjectStreamPathStorageTest.java	(revision 7ecf9b03cc9ef97ec8637f75e0717ef76dc47ec2)
+++ test/ru/javawebinar/basejava/storage/ObjectPathStorageTest.java	(date 1559593332424)
@@ -1,13 +1,15 @@
 package ru.javawebinar.basejava.storage;
 
+import ru.javawebinar.basejava.storage.serializer.ObjectStreamSerializer;
+
 /**
  * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 28.05.2019.
  * @link https://github.com/vladmeh/basejava
  */
 
-public class ObjectStreamPathStorageTest extends AbstractStorageTest {
+public class ObjectPathStorageTest extends AbstractStorageTest {
 
-    public ObjectStreamPathStorageTest() {
-        super(new ObjectStreamPathStorage(STORAGE_DIR.getAbsolutePath()));
+    public ObjectPathStorageTest() {
+        super(new PathStorage(STORAGE_DIR.getAbsolutePath(), new ObjectStreamSerializer()));
     }
 }
\ No newline at end of file
Index: test/ru/javawebinar/basejava/storage/AllStorageTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/ru/javawebinar/basejava/storage/AllStorageTest.java	(revision 7ecf9b03cc9ef97ec8637f75e0717ef76dc47ec2)
+++ test/ru/javawebinar/basejava/storage/AllStorageTest.java	(date 1559593332330)
@@ -14,7 +14,8 @@
         ListStorageTest.class,
         MapUuidStorageTest.class,
         MapResumeStorageTest.class,
-        ObjectStreamStorageTest.class
+        ObjectFileStorageTest.class,
+        ObjectPathStorageTest.class,
 })
 public class AllStorageTest {
 }
Index: src/ru/javawebinar/basejava/storage/serializer/StreamSerializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ru/javawebinar/basejava/storage/serializer/StreamSerializer.java	(date 1559592711131)
+++ src/ru/javawebinar/basejava/storage/serializer/StreamSerializer.java	(date 1559592711131)
@@ -0,0 +1,20 @@
+package ru.javawebinar.basejava.storage.serializer;
+
+import ru.javawebinar.basejava.model.Resume;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+/**
+ * @author Vladimir Mikhaylov <vladmeh@gmail.com> on 03.06.2019.
+ * @link https://github.com/vladmeh/basejava
+ */
+
+public interface StreamSerializer {
+
+    void doWrite(Resume r, OutputStream file) throws IOException;
+
+    Resume doRead(InputStream file) throws IOException;
+
+}
